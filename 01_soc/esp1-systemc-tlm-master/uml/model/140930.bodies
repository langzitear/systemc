class TapActionDRScan
!!!146690.cpp!!!	TapActionDRScan(inout _doneEvent : sc_core::sc_event, in _dRegIn : uint64_t, in _dRegSize : int)
  // Print a rude message if we are not small
  if (dRegBitSize > 64)
    {
      std::cerr << "Simple DR size reduced to 64 bits" << std::endl;
      dRegBitSize = 64;
    }

  // Simple representation
  dRegIn  = _dRegIn;
  dRegOut = 0;

!!!146818.cpp!!!	~TapActionDRScan()
  if (dRegWordSize > 1)
    {
      delete [] dRegInArray;
      delete [] dRegOutArray;
    }
!!!146946.cpp!!!	getDRegOut(in dRegArray : uint64_t) : void
  if (1 == dRegWordSize)
    {
      dRegArray[0] = dRegOut;
    }
  else
    {
      for (int i = 0 ; i < dRegWordSize; i++)
	{
	  dRegArray[i] = dRegOutArray[i];
	}
    }
!!!147074.cpp!!!	getDRegOut() : uint64_t
  if (1 == dRegWordSize)
    {
      return dRegOut;
    }
  else
    {
      return dRegOutArray[0];
    }
!!!147202.cpp!!!	process(inout tapStateMachine : TapStateMachine, inout tdi : bool, in tdo : bool, inout tms : bool) : bool
  // Ensure we are in a consistent state. If not then we'll have moved towards
  // it and can return with the given tms
  if (!checkResetDone (tapStateMachine, tms, true))
    {
      return false;
    }

  switch (dRScanState)
    {
    case SHIFT_DR_PREPARING:

      // Are we in the Shift-DR state yet?
      if (!tapStateMachine->targetState (TAP_SHIFT_DR, tms))
	{
	  return  false;		// Not there. Accept the TMS value
	}
      else
	{
	  dRScanState = SHIFT_DR_SHIFTING;	// Drop through
	}

    case SHIFT_DR_SHIFTING:

      // Are we still shifting stuff?
      if (bitsShifted < dRegBitSize)
	{
	  // We are in the Shift-DR state. Another bit about to be done, so
	  // increment the count
	  bitsShifted++;

	  // Set the TDI value. In a routine to keep this tidy.
	  tdi = shiftDRegOut ();

	  // Record the TDO value. This is always a cycle late, so we ignore
	  // it the first time. The value shifts in from the top.
	  if (bitsShifted > 1)
	    {
	      shiftDRegIn (tdo);
	    }

	  // TMS is 0 to keep us here UNLESS this is the last bit, in which case
	  // it is 1 to move us into Exit1-DR.
	  tms = (bitsShifted == dRegBitSize);

	  // Not done until we've updated
	  return false;
	}
      else
	{
	  // Capture the last TDO bit
	  shiftDRegIn (tdo);

	  dRScanState = SHIFT_DR_UPDATING;	// Drop through
	}

    case SHIFT_DR_UPDATING:

      // Are we still trying to update?
      if (!tapStateMachine->targetState (TAP_UPDATE_DR, tms))
	{
	  return  false;		// Not there. Accept the TMS value
	}
      else
	{
	  return  true;			// All done
	}
    }
!!!147330.cpp!!!	shiftDRegOut() : bool
  if (1 == dRegWordSize)		// "Small" register
    {
      bool  res = dRegIn & 1;
      dRegIn >>= 1;
      return  res;
    }
  else					// "Large" register
    {
      bool  res = (dRegInArray[0] & 1) == 1;

      // Shift all but the first word along
      for (int  i = 0; i < (dRegWordSize - 1); i++)
	{
	  dRegInArray[i] = (dRegInArray[i] >> 1) | (dRegInArray[i+1] << 63);
	}

      // Shift the first word
      dRegInArray[dRegWordSize - 1] >>= 1;

      return  res;
    }
!!!147458.cpp!!!	shiftDRegIn(in bitIn : bool) : void
  if (1 == dRegWordSize)		// "Small" register
    {
      dRegOut >>= 1;			// Move all the existing bits right

      if (bitIn)			// OR any new bit in
	{
	  uint64_t tmpBit = 1ULL << (dRegBitSize - 1);
	  dRegOut |= tmpBit;
	}
    }
  else					// "Large" register
    {
      // Shift all but the first word along
      for (int  i = 0; i < (dRegWordSize - 1); i++)
	{
	  dRegOutArray[i] >>= 1;
	  dRegOutArray[i]  |= dRegOutArray[i+1] << 63;
	}

      // The first word is shifted and the new bit masked in
      dRegOutArray[dRegWordSize - 1] >>= 1;
      dRegOutArray[dRegWordSize - 1]  |= bitIn ? (topMask + 1) >> 1 : 0;
    }
