class UartSC
!!!192770.cpp!!!	UartSC(in name : sc_core::sc_module_name)
  // Set up the thread for the bus side
  SC_THREAD( busThread );

  // Set up the method for the terminal side (statically sensitive to Rx)
  SC_METHOD( rxMethod );
  sensitive << rx;
  dont_initialize();

  // Register the blocking transport method
  bus.register_b_transport( this, &UartSC::busReadWrite );

  // Clear UART regs
  bzero( (void *)&regs, sizeof( regs ));

!!!192898.cpp!!!	busThread() : void
  // Loop listening for changes on the Tx buffer, waiting for a baud rate
  // delay then sending to the terminal
  while( true ) {
    set( regs.lsr, UART_LSR_THRE );	// Indicate buffer empty
    set( regs.lsr, UART_LSR_TEMT );
    genIntr( UART_IER_TBEI );		// Interrupt if enabled

    wait( txReceived );			// Wait for a Tx request
    tx.write( regs.thr );		// Send char to terminal
  }
!!!193026.cpp!!!	busReadWrite(inout payload : tlm::tlm_generic_payload, inout delay : sc_core::sc_time) : void
  // Break out the address, mask and data pointer. This should be only a
  // single byte access.
  sc_dt::uint64      addr    = payload.get_address();
  unsigned char     *maskPtr = payload.get_byte_enable_ptr();
  unsigned char     *dataPtr = payload.get_data_ptr();

  int                offset;		// Data byte offset in word
  unsigned char      uaddr;		// UART address

  // Deduce the byte address (endianness independent)
  if (0xff == maskPtr[0])
    {
      offset = 0;
    }
  else if (0xff == maskPtr[1])
    {
      offset = 1;
    }
  else if (0xff == maskPtr[2])
    {
      offset = 2;
    }
  else if (0xff == maskPtr[3])
    {
      offset = 3;
    }
  else
    {
      payload.set_response_status( tlm::TLM_GENERIC_ERROR_RESPONSE );
      return;
    }

  // Mask off the address to its range. This ought to have been done already
  // by an arbiter/decoder.
  uaddr = (unsigned char)((addr + offset) & UART_ADDR_MASK);

  // Which command?
  switch( payload.get_command() ) {
  case tlm::TLM_READ_COMMAND:  dataPtr[offset] = busRead( uaddr ); break;
  case tlm::TLM_WRITE_COMMAND: busWrite( uaddr, dataPtr[offset] ); break;
  case tlm::TLM_IGNORE_COMMAND:
    payload.set_response_status( tlm::TLM_GENERIC_ERROR_RESPONSE );
    return;
  }

  // Single byte accesses always work
  payload.set_response_status( tlm::TLM_OK_RESPONSE );

!!!193154.cpp!!!	busWrite(in uaddr : byte, in wdata : byte) : void
  // State machine lookup on the register
  switch( uaddr ) {
  case UART_BUF:
    if( isSet( regs.lcr, UART_LCR_DLAB ) ) {	// DLL
      regs.dl = (regs.dl & 0xff00) | (unsigned short int)wdata;
    }
    else {
      regs.thr = wdata;

      clr( regs.lsr, UART_LSR_TEMT );		// Tx buffer now full
      clr( regs.lsr, UART_LSR_THRE );
      clrIntr( UART_IER_TBEI );

      txReceived.notify();			// Tell the bus thread
    }
    break;

  case UART_IER:
    if( isSet( regs.lcr, UART_LCR_DLAB ) ) {	// DLH
      regs.dl = (regs.dl & 0x00ff) | ((unsigned short int)wdata << 8);
    }
    else {
      regs.ier = wdata;
    }
    break;

  case UART_IIR:                   break;	// Read only
  case UART_LCR: regs.lcr = wdata; break;
  case UART_MCR: 
    regs.mcr = wdata;
    modemLoopback();
    break;

  case UART_LSR:                   break;	// Read only
  case UART_MSR:                   break;	// Read only
  case UART_SCR: regs.scr = wdata; break;
  }

!!!193282.cpp!!!	setIntrFlags() : void
  clr( regs.iir, UART_IIR_MASK );			// Clear current
  clr( regs.iir, UART_IIR_IPEND );			// 0 = pending

  if( isSet( intrPending, UART_IER_RLSI )) {		// Priority order
    set( regs.iir, UART_IIR_RLS );
  }
  else if( isSet( intrPending, UART_IER_RBFI )) {
    set( regs.iir, UART_IIR_RDA );
  }
  else if( isSet( intrPending, UART_IER_TBEI )) {
    set( regs.iir, UART_IIR_THRE );
  }
  else if( isSet( intrPending, UART_IER_MSI )) {
    set( regs.iir, UART_IIR_MOD );
  }
  else {
    set( regs.iir, UART_IIR_IPEND );			// 1 = not pending
  }
!!!193410.cpp!!!	genIntr(in ierFlag : byte) : void
  if( isSet( regs.ier, ierFlag )) {
    set( intrPending, ierFlag );	// Mark this interrupt as pending.
    setIntrFlags();			// Show highest priority
  }
!!!193538.cpp!!!	clrIntr(in ierFlag : byte) : void
  clr( intrPending, ierFlag );		// Mark this interrupt as not pending
  setIntrFlags();

!!!193666.cpp!!!	set(inout reg : byte, in flags : byte) : void
  reg |= flags;

!!!193794.cpp!!!	clr(inout reg : byte, in flags : byte) : void
  reg &= ~flags;

!!!193922.cpp!!!	isSet(in reg : byte, in flags : byte) : bool
  return  flags == (reg & flags);

!!!194050.cpp!!!	isClr(in reg : byte, in flags : byte) : bool
  return  flags != (reg & flags);

!!!194178.cpp!!!	rxMethod() : void
  regs.rbr  = rx.read();

  sc_core::sc_time  now = sc_core::sc_time_stamp();
  printf( "Char '%c' read at    %12.9f sec\n", regs.rbr, now.to_seconds());

  set( regs.lsr, UART_LSR_DR );		// Mark data ready
  genIntr( UART_IER_RBFI );		// Interrupt if enabled

!!!194306.cpp!!!	busRead(in uaddr : byte) : byte
  unsigned char  res;		// The result to return

  // State machine lookup on the register
  switch( uaddr ) {
  case UART_BUF:
    if( isSet(regs.lcr, UART_LCR_DLAB ) ) {	// DLL byte
      res = (unsigned char)(regs.dl & 0x00ff);
    }
    else {
      res = regs.rbr;				// Get the read data
      clr( regs.lsr, UART_LSR_DR );		// Clear the data ready bit
      clrIntr( UART_IER_RBFI );
    }
    break;

  case UART_IER:
    if( isSet( regs.lcr, UART_LCR_DLAB ) ) {	// DLH byte
      res = (unsigned char)((regs.dl & 0xff00) >> 8);
    }
    else {
      res = regs.ier;
    }
    break;

  case UART_IIR:
    res = regs.iir;
    clrIntr( UART_IER_TBEI );
    break;

  case UART_LCR: res = regs.lcr; break;
  case UART_MCR: res = 0;        break;		// Write only
  case UART_LSR:
    res = regs.lsr;
    clr( regs.lsr, UART_LSR_BI );
    clr( regs.lsr, UART_LSR_FE );
    clr( regs.lsr, UART_LSR_PE );
    clr( regs.lsr, UART_LSR_OE );
    clrIntr( UART_IER_RLSI );
    break;

  case UART_MSR:
    res      = regs.msr;
    regs.msr = 0;
    clrIntr( UART_IER_MSI );
    modemLoopback();				// May need resetting
    break;

  case UART_SCR: res = regs.scr; break;
  }

  return res;

!!!194434.cpp!!!	modemLoopback() : void
  // Only if we are in loopback state
  if( isClr( regs.mcr, UART_MCR_LOOP )) {
    return;
  }

  // Delta status bits for what is about to change.

  if( (isSet( regs.mcr, UART_MCR_RTS ) && isClr( regs.msr, UART_MSR_CTS )) ||
      (isClr( regs.mcr, UART_MCR_RTS ) && isSet( regs.msr, UART_MSR_CTS )) ) {
    set( regs.msr, UART_MSR_DCTS );
  }
  else {
    clr( regs.msr, UART_MSR_DCTS );
  }

  if( (isSet( regs.mcr, UART_MCR_DTR ) && isClr( regs.msr, UART_MSR_DSR )) ||
      (isClr( regs.mcr, UART_MCR_DTR ) && isSet( regs.msr, UART_MSR_DSR )) ) {
    set( regs.msr, UART_MSR_DDSR );
  }
  else {
    clr( regs.msr, UART_MSR_DDSR );
  }

  if( (isSet( regs.mcr, UART_MCR_OUT1 ) && isClr( regs.msr, UART_MSR_RI )) ||
      (isClr( regs.mcr, UART_MCR_OUT1 ) && isSet( regs.msr, UART_MSR_RI )) ) {
    set( regs.msr, UART_MSR_TERI );
  }
  else {
    clr( regs.msr, UART_MSR_TERI );
  }

  if( (isSet( regs.mcr, UART_MCR_OUT2 ) && isClr( regs.msr, UART_MSR_DCD )) ||
      (isClr( regs.mcr, UART_MCR_OUT2 ) && isSet( regs.msr, UART_MSR_DCD )) ) {
    set( regs.msr, UART_MSR_DDCD );
  }
  else {
    clr( regs.msr, UART_MSR_DDCD );
  }

  // Loopback status bits

  if( isSet( regs.mcr, UART_MCR_RTS )) {	// CTS = RTS
    set( regs.msr, UART_MSR_CTS );
  }
  else {
    clr( regs.msr, UART_MSR_CTS );
  }

  if( isSet( regs.mcr, UART_MCR_DTR )) {	// DSR = DTR
    set( regs.msr, UART_MSR_DSR );
  }
  else {
    clr( regs.msr, UART_MSR_DSR );
  }

  if( isSet( regs.mcr, UART_MCR_OUT1 )) {	// RI = OUT1
    set( regs.msr, UART_MSR_RI );
  }
  else {
    clr( regs.msr, UART_MSR_RI );
  }

  if( isSet( regs.mcr, UART_MCR_OUT2 )) {	// DSR = DTR
    set( regs.msr, UART_MSR_DCD );
  }
  else {
    clr( regs.msr, UART_MSR_DCD );
  }

  if( isSet( regs.msr, UART_MSR_DCTS ) |
      isSet( regs.msr, UART_MSR_DDSR ) |
      isSet( regs.msr, UART_MSR_TERI ) |
      isSet( regs.msr, UART_MSR_DDCD ) ) {
    genIntr( UART_IER_MSI );
  }

